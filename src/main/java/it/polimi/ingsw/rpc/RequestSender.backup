package it.polimi.ingsw.rpc;

import it.polimi.ingsw.controller.NotExecutedException;
import it.polimi.ingsw.models.InternalError;

import java.io.*;
import java.util.Random;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicInteger;

public class RequestSender implements AutoCloseable {
    final ObjectOutputStream request;
    final ObjectInputStream response;
    AtomicInteger sequenceNumber;

    public RequestSender(InputStream input, OutputStream output) throws IOException {
        this.request = new ObjectOutputStream(output);
        this.response = new ObjectInputStream(input);
        this.sequenceNumber = new AtomicInteger(new Random().nextInt());
    }

    @Override
    public void close() throws Exception {
        this.request.close();
        this.response.close();
    }

    public CompletableFuture<Serializable> sendRequest(Serializable command)
            throws NotExecutedException {
        int sequenceNumber = this.sequenceNumber.incrementAndGet();
        int responseSequenceNumber;
        boolean isException;
        CompletableFuture<Serializable> result;

        try {
            synchronized (this) {
                this.request.writeInt(sequenceNumber);
                this.request.writeObject(command);
                responseSequenceNumber = this.response.readInt();
                isException = this.response.readBoolean();
                result = (Serializable) this.response.readObject();
            }
        } catch (IOException | ClassNotFoundException e) {
            throw new InternalError(e);
        }

        if(responseSequenceNumber != sequenceNumber) {
            throw new InternalError("Sequence number does not match: " +
                    sequenceNumber + "; " + responseSequenceNumber);
        }

        if(isException) {
            if(result instanceof RuntimeException) {
                throw (RuntimeException)result;
            }
            else if(result instanceof NotExecutedException) {
                throw (NotExecutedException)result;
            }
            else {
                throw new InternalError("Unexpected exception: " + result);
            }
        }
        else {
            return result;
        }
    }
}
